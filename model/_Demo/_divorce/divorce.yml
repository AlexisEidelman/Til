entities:
    person:          
        processes:     
            divorce : 
                - agediff: if(ISFEMALE and ISMARRIED, age - l_conj.age, 0)
                - children_couple: invl_mere.count(target_filter=(pere==l_mere.conj) )
                - other_children : invl_mere.count() - children_couple
                # ca marche : - show(groupby(children_couple, other_children))
                # select females to divorce
                # - divorce: logit_regr(-2.02-0.06*agediff-0.04*dur_in_couple
                                       # +0.58*(children_couple==0)
                                       # +0.21*(children_couple==1)
                                       # +0.13*(children_couple>3)
                                       # +0.41*(other_children>0),
                                      # filter = ISFEMALE and ISMARRIED and (dur_in_couple > 0),
                                      # align = 0.2)
                                      
                - proba_divorce:    logistic(-2.02-0.06*agediff-0.04*dur_in_couple
                                       +0.58*(children_couple==0)
                                       +0.21*(children_couple==1)
                                       +0.13*(children_couple>3)
                                       +0.41*(other_children>0))

                - divorce: align_abs(proba_divorce, filter = ISFEMALE and ISMARRIED and (dur_in_couple > 0),
                        method ="sidewalk", periodicity_given="year")
                # - divorce1: align_abs(proba_divorce, 10+sum(proba_divorce), filter = ISFEMALE and ISMARRIED and (dur_in_couple > 0), method ="sidewalk")
                # - show('nb divorce 1', sum(divorce1), 10+sum(proba_divorce))
                # break link to partner
                - to_divorce: divorce or l_conj.divorce
                
                ### men 
                # males move out from house
                # à améliorer en fonction de la propriété, de qui part et tout
                # si on est chez ses parents et que c'est eux les chef, c'est à l'autre de bouger.
                - MOVE: (ISMALE and to_divorce and not ((l_pere.men == men or l_mere.men == men) and (quimen>1))) 
                # si on vit avec ses parents, c'est l'autre qui bouge
                - MOVE: if(to_divorce and (not l_conj.MOVE) and (conj>0), True, False)
                # pour les couples homosexuels, à ce niveau là, on peut avoir deux MOVE
                - MOVE: if(MOVE and l_conj.MOVE and (id>l_conj.id),False,MOVE)
                - new_men: if(MOVE,
                            new('menage', filter=MOVE,
                                region_id=l_men.region_id,
                                rent=l_men.rent/1.5, pref=id),
                            men)
                - quimen: if(l_conj.quimen==0 and l_conj.MOVE, 0, quimen)
                - quimen: if(MOVE, 0, quimen) # condition sur quimen pour les mariés qui vivent chez leur parent
                
                # enfants -> restent avec leur mère
                - new_men: if(l_mere.MOVE and  (l_mere.men==men) and (new_men==men),
                            l_mere.new_men,
                            new_men)               
                # autres...

                ###foy
                # female move out from declar
                # on ajoute condition sur l_conj, pour ne pas appliquer aux couples non mariés
                - MOVE: (ISFEMALE and to_divorce and not ((l_pere.foy == foy or l_mere.foy == foy) and (quifoy>1)) and (l_conj.foy == foy) ) 
                - MOVE: if(to_divorce and (not l_conj.MOVE) and (conj>0) and (l_conj.foy == foy), True, False)         
                - new_foy: if(MOVE, 
                                new('declar', filter=MOVE ,
                                     pond=l_foy.pond, vous= id),
                                foy) 
                - quifoy: if(l_conj.quifoy==0 and l_conj.MOVE, 0, quifoy)
                - quifoy: if(MOVE, 0, quifoy)
                # plus tard changer le vous ici directement
                 
                # enfant
                # children goes with....HYPOTHESIS
                # with fater  : nothing to do
                # with mother :
                - new_foy: if(l_mere.to_divorce and  (l_mere.foy==foy) and (new_foy==foy),
                            if(l_pere.foy==foy, new_foy, l_mere.new_foy),
                            new_foy)                   
                # autres...
                - men: new_men
                - foy: new_foy

                - civilstate: if(to_divorce, DIVORCED, civilstate)
                - dur_in_couple: if(to_divorce, 0, dur_in_couple)
                - dur_out_couple: if(ISDIVORCED or ISWIDOW, 
                                    if(to_divorce, 0, dur_out_couple+1),
                                    0)           
                - conj: if(to_divorce, UNSET, conj)       

                # remplacera les etapes d'actualisation menage et declar quand fonctionnel
                # - l_men.set(pref = persons.max(id,quimen==0)
                # - l_foy.set(vous = on_declar.max(id,quifoy==0)
                
                # - l_men.pref: if(quimen==0, id, l_men.pref)
                # - l_foy.vous: if(quifoy==0, id, l_foy.vous)
                

            dump_info: csv(dump(id, age, sexe, men, l_men.nb_persons,
                                l_mere.age, l_conj.age), suffix='info')
            
            civilstate_changes: show(groupby(civilstate, lag(civilstate)))