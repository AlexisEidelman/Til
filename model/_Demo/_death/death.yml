entities:
    person:          
        processes:          
            death:
                ############# Tirage ###########
                - dead: if(ISMALE,
                           logit_regr(0.0, align='data\\p_dead_m.csv'),
                           logit_regr(0.0, align='data\\p_dead_f.csv'))
                       
                # - test_dead: age/100
                # - test_log: logistic((age-50)/10)
                # - test_logit: logit_score(age/100)
                
                # - dead1: align_abs(test_dead, 100)
                # # - dead2: align_abs(test_dead, 1000, method = "sidewalk")
                # - dead3: align_abs(test_log, 100)
                # - dead4: align_abs(test_log, 100, method = "sidewalk")
                # - dead5: align_abs(test_logit, 100)
                
                # - show('dead1', min(age,filter = dead1))
                # # - show('dead2', min(age,filter = dead2))
                # - show('dead3', min(age,filter = dead3))
                # - show('dead4', min(age,filter = dead4))
                # - show('dead5', min(age,filter = dead5))
                           
                ### par simplicite pour l'heritage (parce que pour le reste ca marche)
                ### on ne fait mourir qu une seule personne
                ### A retirer pour tester, ca doit etre bon maintenant
                - dead: if( l_conj.dead and l_conj.id < id, False, dead)
                - dead: if( l_pere.dead, False, dead)
                - dead: if( l_mere.dead, False, dead)

                - show('Avg age of conj', avg(l_conj.age, filter=l_conj.age>-1))
                - show('Number of male death', count(dead and ISMALE))
                - show('Number of male death', count(dead and ISFEMALE))
                - show('Number of male death', count(dead))
                - show('Avg age of dead women', avg(age, filter=dead and ISFEMALE))
                - show('Widows', sum(ISWIDOW))
                
                ############# Constitution du foyer ###########
                # deal with qui foy
                # si conjoint, probleme reglé
                - quifoy: if(l_conj.dead and l_conj.quifoy == 0, 0, quifoy)
                - quimen: if(l_conj.dead and l_conj.quimen == 0, 0, quimen)
                # si les autres personnes sont des enfants, on cherche un autre parent
                - orph_pere_foy: (l_pere.dead and (l_pere.foy == foy) and (quifoy>1)) 
                - orph_mere_foy: (l_mere.dead and (l_mere.foy == foy) and (quifoy>1))
                - orph_pere_men: (l_pere.dead and (l_pere.men == men) and (quimen>1)) 
                - orph_mere_men: (l_mere.dead and (l_mere.men == men) and (quimen>1))   
                # si on a une mere c'est bon, si on en a pas 
                #       si on a plus  de 16 ans on vit tout seul 
                #       sinon, c'est moche mais on supprime
                #on peut faire mieux en se posant un peu, par exemple on peut rester s'il y avait un conjoint
                #meme s'il n'est pas son parent s'il n'y en a pas d'autre
                - men: if(orph_pere_men,
                            if( (mere>0) and (not l_mere.dead),
                                l_mere.men,
                                if(age>16, -3, -2) 
                               ),
                            men)
                - men: if(orph_mere_men,
                            if( (pere>0) and (not l_pere.dead),
                                l_pere.men,
                                if(age>16, -3, -2) 
                               ),
                            men) 
                            
                - quimen: if(men==-3, 0, quimen) 
                - survivor: men==-3
                - new_men: if(men==-3, new('menage', region_id=l_men.region_id,
                                                    rent=l_men.rent/1.5, pref=id),
                                                    men)              
                # la famille du survivant le suit
                # (eux n'ont pas changé de men car ils ce n'est pas leur parent qui est mort)
                - men: if( (l_conj.survivor ),  l_conj.new_men, men)  
                - quimen: if(l_conj.survivor, 1, quimen) 
                - men: if( (l_pere.survivor and l_pere.men==men), l_pere.new_men, men)    
                - men: if( (l_mere.survivor and l_mere.men==men), l_mere.new_men, men)  
                - men: if( men ==-3, new_men, men)   
                
                # Colocation 
                - coloc: (l_men.l_pref.dead and l_men.l_pref.conj < 1 and
                            l_men.l_pref.id != pere and l_men.l_pref.id != mere and quimen>1)
                # le plus vieux devient personne de reference
                - quimen: if( coloc and id == l_men.get(persons.min(id, not dead)) ,
                            0,
                            quimen)
                # et son conjoint devient quimen==1 du coup
                - quimen: if( l_conj.coloc and l_conj.id == l_conj.l_men.get(persons.min(id, not dead)),
                            1,
                            quimen)              
                # Une solution pourrait être ce qui suit mais risque d'avoir plusieurs quifoy==0)
                # - quifoy: if(l_foy.l_vous.dead and l_foy.l_vous.conj == 0, 0, quifoy)
                # - quimen: if(l_men.l_pref.dead and l_men.l_pref.conj == 0, 0, quimen)
                # # il faut ensuite changer les vous...
                
                - old_foy: foy+0
                - foy: if(orph_pere_foy,
                            if( (mere>0) and (not l_mere.dead),
                                l_mere.foy,
                                if(age>16, -3, -2) 
                               ),
                            foy)
                - foy: if(orph_mere_foy,
                            if( (pere>0) and (not l_pere.dead),
                                l_pere.foy,
                                if(age>16, -3, -2) 
                               ),
                            foy)                                
                - quifoy: if(foy==-3, 0, quifoy)
                - survivor: foy==-3                
                - new_foy: if(foy==-3, new('declar',pond=l_foy.pond, vous= id), foy)                     
                # la famille du survivant le suit
                # (eux n'ont pas changé de foy car ils ce n'est pas leur parent qui est mort)
                - foy: if( (l_conj.survivor ),  l_conj.new_foy, foy)  
                - quifoy: if(l_conj.survivor, 1, quifoy) 
                - foy: if( (l_pere.survivor and l_pere.old_foy==foy), l_pere.new_foy, foy)    
                - foy: if( (l_mere.survivor and l_mere.old_foy==foy), l_mere.new_foy, foy) 
                - test: l_mere.survivor
                - test: l_mere.old_foy
                - test: l_mere.new_foy               
                - foy: if( foy == -3, new_foy, foy) 
                        
                
                ############# Heritance ########### 
                # source: http://droit-finances.commentcamarche.net/contents/1000-succession-heritage-et-heritiers
                # if children....
                
                
                - pers2reg.vivant: if(dead, False, pers2reg.vivant)
                               
                - nb_rang1: pers2reg.get(reg_inv_pere.count(vivant) + reg_inv_mere.count(vivant)) 
                # la ligne du dessus revient a : - rang1 : invl_pere.count() + invl_mere.count() 
                # mais avec les vivant updater et donc gere les cas de deces simultane a priori
                #  pers2reg.herit_potentiel: not pere.vivant and 
                
                #get : rang1
                #       rang2 = not rang + count(reg_inv_pere.count(vivant) + reg_inv_mere.count(vivant) >0 )
                #       rang3 = 
                - nb_rang2: pers2reg.get(reg_inv_pere.count(not vivant and 
                                            (reg_inv_pere.count(vivant) +
                                             reg_inv_mere.count(vivant) >0 )) 
                                        + reg_inv_mere.count(not vivant and 
                                            (reg_inv_mere.count(vivant)  +
                                             reg_inv_mere.count(vivant) >0 )) )
                                            
                - nb_rang3: pers2reg.get(reg_inv_pere.count(not vivant and 
                                            not (reg_inv_pere.count(vivant) +
                                                 reg_inv_mere.count(vivant) >0 ) and
                                            (reg_inv_pere.count( reg_inv_pere.count(vivant) +
                                                                reg_inv_mere.count(vivant)) +     
                                             reg_inv_mere.count( reg_inv_pere.count(vivant) +
                                                                reg_inv_mere.count(vivant)) >0
                                            )                                            
                                        )
                                    )
                - show('nb_enfants vivant', groupby(dead,nb_rang1))
                - show('nb_enfants morts avec enfants vivant', groupby(dead,nb_rang2))
                - show('nb_enfants morts avec petits-enfants vivant seuelement', groupby(dead,nb_rang3))
                
                #### si conjoint
                # on fait l'hypothese de pas de donation au dernier vivant
                - nb_part_herit: nb_rang1+nb_rang2+nb_rang3
                - patrimoine: if(not dead and l_conj.dead,
                                    if(l_conj.nb_part_herit>0, 
                                        patrimoine+l_conj.patrimoine/4,
                                        patrimoine+l_conj.patrimoine),
                                    patrimoine)
                # on retire le patrimoine, de la personne decedée
                - patrimoine: if(dead and not l_conj.dead, 
                                    if(nb_part_herit>0, patrimoine*3/4, 0), 
                                    patrimoine)
                                    
                - pers2reg.heritage: if(dead and nb_part_herit>0, 
                                        pers2reg.heritage + patrimoine/nb_part_herit, 
                                        pers2reg.heritage) 
                # apres on fait une etape dans le registre
                - pers2reg.heritage_asc: if(dead and nb_part_herit==0, pers2reg.heritage_asc+patrimoine, pers2reg.heritage_asc)                

                ############# Suppression ###########                
                - civilstate: if(l_conj.dead, WIDOW, civilstate)
                - dur_in_couple: if(l_conj.dead, 0, dur_in_couple)
                - civilstate: if(l_conj.dead, WIDOW, civilstate)
                - conj: if(l_conj.dead, UNSET, conj)
                - mere: if(l_mere.dead, UNSET, mere)
                - pere: if(l_pere.dead, UNSET, pere)
                
                - pers2reg.deces: if(dead, period, pers2reg.deces)
                - remove(dead)   
                - remove(men==-2)
                - remove(men==-2)

                # - l_men.pref: if(quimen==0,id, l_men.pref)
                # - l_foy.vous: if(quifoy==0,id, l_foy.vous)